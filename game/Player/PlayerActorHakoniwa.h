#pragma once

#include "Player/PlayerActorBase.h"
#include "Util/IUseDimension.h"

namespace al {
class ComboCounter;
class FootPrintHolder;
class HitSensor;
class WaterSurfaceFinder;
}  // namespace al

class PlayerInfo;
class PlayerConst;
class PlayerInput;
class PlayerTrigger;
class HackCap;
class ActorDimensionKeeper;
class PlayerModelHolder;
class PlayerModelChangerHakoniwa;
class PlayerAnimator;
class PlayerColliderHakoniwa;
class PlayerPuppet;
class PlayerAreaChecker;
class PlayerOxygen;
class PlayerDamageKeeper;
class PlayerDemoActionFlag;
class PlayerCapActionHistory;
class PlayerCapManHeroEyesControl;
class PlayerContinuousJump;
class PlayerContinuousLongJump;
class PlayerCounterAfterUpperPunch;
class PlayerCounterForceRun;
class PlayerCounterIceWater;
class PlayerCounterQuickTurnJump;
class PlayerWallActionHistory;
class PlayerBindKeeper;
class PlayerCarryKeeper;
class PlayerEquipmentUser;
class PlayerHackKeeper;
class PlayerFormSensorCollisionArranger;
class PlayerJumpMessageRequest;
class PlayerSandSinkAffect;
class PlayerSpinCapAttack;
class PlayerActionDiveInWater;
class PlayerEffect;
class PlayerEyeSensorHitHolder;
class PlayerPushReceiver;
class PlayerHitPush;
class PlayerExternalVelocity;
class PlayerJointControlKeeper;
class PlayerPainPartsKeeper;
class PlayerRecoverySafetyPoint;
class PlayerRippleGenerator;
class PlayerSeparateCapFlag;
class PlayerWetControl;
class PlayerStainControl;
class GaugeAir;
class WaterSurfaceShadow;
class WorldEndBorderKeeper;
class PlayerSeCtrl;
class PlayerStateWait;
class PlayerStateSquat;
class PlayerStateRunHakoniwa2D3D;
class PlayerStateSlope;
class PlayerStateRolling;
class PlayerStateSpinCap;
class PlayerStateJump;
class PlayerStateCapCatchPop;
class PlayerStateWallAir;
class PlayerStateWallCatch;
class PlayerStateGrabCeil;
class PlayerStatePoleClimb;
class PlayerStateHipDrop;
class PlayerStateHeadSliding;
class PlayerStateLongJump;
class PlayerStateFallHakoniwa;
class PlayerStateSandSink;
class ActorStateSandGeyser;
class PlayerStateRise;
class PlayerStateSwim;
class PlayerStateDamageLife;
class PlayerStateDamageSwim;
class PlayerStateDamageFire;
class PlayerStatePress;
class PlayerStateBind;
class PlayerStateHack;
class PlayerStateEndHack;
class PlayerStateCameraSubjective;
class PlayerStateAbyss;
class PlayerJudgeAirForceCount;
class PlayerJudgeCameraSubjective;
class PlayerJudgeCapCatchPop;
class PlayerJudgeDeadWipeStart;
class PlayerJudgeDirectRolling;
class PlayerJudgeEnableStandUp;
class PlayerJudgeForceLand;
class PlayerJudgeForceSlopeSlide;
class PlayerJudgeForceRolling;
class PlayerJudgeGrabCeil;
class PlayerJudgeInWater;
class PlayerJudgeInWater;
class PlayerJudgeInWater;
class PlayerJudgeInWater;
class PlayerJudgeInvalidateInputFall;
class PlayerJudgeLongFall;
class PlayerJudgeOutInWater;
class PlayerJudgeRecoveryLifeFast;
class PlayerJudgeSandSink;
class PlayerJudgeSpeedCheckFall;
class PlayerJudgeStartHipDrop;
class PlayerJudgeStartRise;
class PlayerJudgeStartRolling;
class PlayerJudgeStartRun;
class PlayerJudgeStartSquat;
class PlayerJudgeStartWaterSurfaceRun;
class PlayerJudgeSlopeSlide;
class PlayerJudgePoleClimb;
class PlayerJudgePreInputJump;
class PlayerJudgePreInputCapThrow;
class PlayerJudgePreInputHackAction;
class HackCapJudgePreInputHoveringJump;
class HackCapJudgePreInputSeparateThrow;
class HackCapJudgePreInputSeparateJump;
class PlayerJudgeWallCatch;
class PlayerJudgeWallCatchInputDir;
class PlayerJudgeWallHitDown;
class PlayerJudgeWallHitDownForceRun;
class PlayerJudgeWallHitDownRolling;
class PlayerJudgeWallKeep;

class PlayerActorHakoniwa : public PlayerActorBase, public IUseDimension {
public:
    PlayerActorHakoniwa(const char*);
    
    void initAfterPlacement() override;
    void movement() override;
    void attackSensor(al::HitSensor*, al::HitSensor*) override;
    bool receiveMsg(const al::SensorMsg*, al::HitSensor*, al::HitSensor*) override;
    void control() override;
    void updateCollider() override;
    void initPlayer(const al::ActorInitInfo&, const PlayerInitInfo&) override;
    u32 getPortNo() const override;
    IUsePlayerCollision* getPlayerCollision() const override;
    PlayerHackKeeper* getPlayerHackKeeper() const override;
    bool isEnableDemo() override;
    void startDemo() override;
    void endDemo() override;
    void startDemoPuppetable() override;
    void endDemoPuppetable() override;
    void startDemoShineGet() override;
    void endDemoShineGet() override;
    void startDemoMainShineGet() override;
    void endDemoMainShineGet() override;
    void startDemoHack() override;
    void endDemoHack() override;
    void startDemoKeepBind() override;
    void noticeDemoKeepBindExecute() override;
    void endDemoKeepBind() override;
    void startDemoKeepCarry() override;
    void endDemoKeepCarry() override;
    void getDemoActor() override;
    void* getDemoAnimator() override;
    bool isDamageStopDemo() const override;
    void* getPlayerPuppet() override;
    PlayerInfo* getPlayerInfo() const override;
    bool checkDeathArea() override;
    void sendCollisionMsg() override;
    bool receivePushMsg(const al::SensorMsg*, al::HitSensor*, al::HitSensor*, f32) override;
    ActorDimensionKeeper* getActorDimensionKeeper() const override;

    void updateModelShadowDropLength();
    void executeAfterCapTarget();
    void syncSensorAndCollision();
    void checkDamageFromCollision();
    void executePreMovementNerveChange();
    void updateCarry();
    void setNerveOnGround();
    void startPlayerPuppet();
    void cancelHackPlayerPuppetDemo();
    void endPlayerPuppet();
    void exeWait();
    bool tryActionCapReturn();
    bool tryActionCapSpinAttack();
    void exeSquat();
    bool tryActionSeparateCapThrow();
    void exeRun();
    void exeSlope();
    void exeRolling();
    void exeSpinCap();
    bool tryChangeNerveFromAir();
    bool tryActionCapSpinAttackMiss();
    void exeJump();
    void exeCapCatchPop();
    void exeWallAir();
    void exeWallCatch();
    void exeGrabCeil();
    void exePoleClimb();
    void exeHipDrop();
    void exeHeadSliding();
    void exeLongJump();
    void exeFall();
    void exeSandSink();
    void exeSandGeyser();
    void exeRise();
    void exeSwim();
    void exeDamage();
    void exeDamageSwim();
    void exeDamageFire();
    void exePress();
    void exeHack();
    void exeEndHack();
    void exeBind();
    bool tryActionCapSpinAttackBindEnd();
    void exeDemo();
    void exeCamera();
    void exeAbyss();
    void exeDead();
    bool tryActionCapSpinAttackImpl(bool);

public:
    PlayerInfo* mPlayerInfo = nullptr;
    PlayerConst* mPlayerConst = nullptr;
    PlayerInput* mPlayerInput = nullptr;
    PlayerTrigger* mPlayerTrigger = nullptr;
    HackCap* mHackCap = nullptr;
    ActorDimensionKeeper* mActorDimensionKeeper = nullptr;
    PlayerModelHolder* mPlayerModelHolder = nullptr;
    PlayerModelChangerHakoniwa* mPlayerModelChangerHakoniwa = nullptr;
    PlayerAnimator* mPlayerAnimator = nullptr;
    PlayerColliderHakoniwa* mPlayerColliderHakoniwa = nullptr;
    PlayerPuppet* mPlayerPuppet = nullptr;
    PlayerAreaChecker* mPlayerAreaChecker = nullptr;
    al::WaterSurfaceFinder* mWaterSurfaceFinder = nullptr;
    PlayerOxygen* mPlayerOxygen = nullptr;
    PlayerDamageKeeper* mPlayerDamageKeeper = nullptr;
    PlayerDemoActionFlag* mPlayerDemoActionFlag = nullptr;
    PlayerCapActionHistory* mPlayerCapActionHistory = nullptr;
    PlayerCapManHeroEyesControl* mPlayerCapManHeroEyesControl = nullptr;
    PlayerContinuousJump* mPlayerContinuousJump = nullptr;
    PlayerContinuousLongJump* mPlayerContinuousLongJump = nullptr;
    PlayerCounterAfterUpperPunch* mPlayerCounterAfterUpperPunch = nullptr;
    PlayerCounterForceRun* mPlayerCounterForceRun = nullptr;
    PlayerCounterIceWater* mPlayerCounterIceWater = nullptr;
    PlayerCounterQuickTurnJump* mPlayerCounterQuickTurnJump = nullptr;
    PlayerWallActionHistory* mPlayerWallActionHistory = nullptr;
    PlayerBindKeeper* mPlayerBindKeeper = nullptr;
    PlayerCarryKeeper* mPlayerCarryKeeper = nullptr;
    PlayerEquipmentUser* mPlayerEquipmentUser = nullptr;
    PlayerHackKeeper* mPlayerHackKeeper = nullptr;
    PlayerFormSensorCollisionArranger* mPlayerFormSensorCollisionArranger = nullptr;
    PlayerJumpMessageRequest* mPlayerJumpMessageRequest = nullptr;
    PlayerSandSinkAffect* mPlayerSandSinkAffect = nullptr;
    PlayerSpinCapAttack* mPlayerSpinCapAttack = nullptr;
    PlayerActionDiveInWater* mPlayerActionDiveInWater = nullptr;
    PlayerEffect* mPlayerEffect = nullptr;
    PlayerEyeSensorHitHolder* mPlayerEyeSensorHitHolder = nullptr;
    PlayerPushReceiver* mPlayerPushReceiver = nullptr;
    PlayerHitPush* mPlayerHitPush = nullptr;
    PlayerExternalVelocity* mPlayerExternalVelocity = nullptr;
    PlayerJointControlKeeper* mPlayerJointControlKeeper = nullptr;
    PlayerPainPartsKeeper* mPlayerPainPartsKeeper = nullptr;
    PlayerRecoverySafetyPoint* mPlayerRecoverySafetyPoint = nullptr;
    PlayerRippleGenerator* mPlayerRippleGenerator = nullptr;
    PlayerSeparateCapFlag* mPlayerSeparateCapFlag = nullptr;
    PlayerWetControl* mPlayerWetControl = nullptr;
    PlayerStainControl* mPlayerStainControl = nullptr;
    al::FootPrintHolder* mFootPrintHolder = nullptr;
    GaugeAir* mGaugeAir = nullptr;
    WaterSurfaceShadow* mWaterSurfaceShadow = nullptr;
    WorldEndBorderKeeper* mWorldEndBorderKeeper = nullptr;
    al::ComboCounter* mComboCounter;
    PlayerSeCtrl* mPlayerSeCtrl = nullptr;
    al::HitSensor* mBodyHitSensor = nullptr;
    bool mIsLongShadow = false;
    PlayerStateWait* mPlayerStateWait = nullptr;
    PlayerStateSquat* mPlayerStateSquat = nullptr;
    PlayerStateRunHakoniwa2D3D* mPlayerStateRunHakoniwa2D3D = nullptr;
    PlayerStateSlope* mPlayerStateSlope = nullptr;
    PlayerStateRolling* mPlayerStateRolling = nullptr;
    PlayerStateSpinCap* mPlayerStateSpinCap = nullptr;
    PlayerStateJump* mPlayerStateJump = nullptr;
    PlayerStateCapCatchPop* mPlayerStateCapCatchPop = nullptr;
    PlayerStateWallAir* mPlayerStateWallAir = nullptr;
    PlayerStateWallCatch* mPlayerStateWallCatch = nullptr;
    PlayerStateGrabCeil* mPlayerStateGrabCeil = nullptr;
    PlayerStatePoleClimb* mPlayerStatePoleClimb = nullptr;
    PlayerStateHipDrop* mPlayerStateHipDrop = nullptr;
    PlayerStateHeadSliding* mPlayerStateHeadSliding = nullptr;
    PlayerStateLongJump* mPlayerStateLongJump = nullptr;
    PlayerStateFallHakoniwa* mPlayerStateFallHakoniwa = nullptr;
    PlayerStateSandSink* mPlayerStateSandSink = nullptr;
    ActorStateSandGeyser* mActorStateSandGeyser = nullptr;
    PlayerStateRise* mPlayerStateRise = nullptr;
    PlayerStateSwim* mPlayerStateSwim = nullptr;
    PlayerStateDamageLife* mPlayerStateDamageLife = nullptr;
    PlayerStateDamageSwim* mPlayerStateDamageSwim = nullptr;
    PlayerStateDamageFire* mPlayerStateDamageFire = nullptr;
    PlayerStatePress* mPlayerStatePress = nullptr;
    PlayerStateBind* mPlayerStateBind = nullptr;
    PlayerStateHack* mPlayerStateHack = nullptr;
    PlayerStateEndHack* mPlayerStateEndHack = nullptr;
    PlayerStateCameraSubjective* mPlayerStateCameraSubjective = nullptr;
    PlayerStateAbyss* mPlayerStateAbyss = nullptr;
    PlayerJudgeAirForceCount* mPlayerJudgeAirForceCount = nullptr;
    PlayerJudgeCameraSubjective* mPlayerJudgeCameraSubjective = nullptr;
    PlayerJudgeCapCatchPop* mPlayerJudgeCapCatchPop = nullptr;
    PlayerJudgeDeadWipeStart* mPlayerJudgeDeadWipeStart = nullptr;
    PlayerJudgeDirectRolling* mPlayerJudgeDirectRolling = nullptr;
    PlayerJudgeEnableStandUp* mPlayerJudgeEnableStandUp = nullptr;
    PlayerJudgeForceLand* mPlayerJudgeForceLand = nullptr;
    PlayerJudgeForceSlopeSlide* mPlayerJudgeForceSlopeSlide = nullptr;
    PlayerJudgeForceRolling* mPlayerJudgeForceRolling = nullptr;
    PlayerJudgeGrabCeil* mPlayerJudgeGrabCeil = nullptr;
    PlayerJudgeInWater* mPlayerJudgeInWater1 = nullptr;
    PlayerJudgeInWater* mPlayerJudgeInWater2 = nullptr;
    PlayerJudgeInWater* mPlayerJudgeInWater3 = nullptr;
    PlayerJudgeInWater* mPlayerJudgeInWater4 = nullptr;
    PlayerJudgeInvalidateInputFall* mPlayerJudgeInvalidateInputFall = nullptr;
    PlayerJudgeLongFall* mPlayerJudgeLongFall = nullptr;
    PlayerJudgeOutInWater* mPlayerJudgeOutInWater = nullptr;
    PlayerJudgeRecoveryLifeFast* mPlayerJudgeRecoveryLifeFast = nullptr;
    PlayerJudgeSandSink* mPlayerJudgeSandSink = nullptr;
    PlayerJudgeSpeedCheckFall* mPlayerJudgeSpeedCheckFall = nullptr;
    PlayerJudgeStartHipDrop* mPlayerJudgeStartHipDrop = nullptr;
    PlayerJudgeStartRise* mPlayerJudgeStartRise = nullptr;
    PlayerJudgeStartRolling* mPlayerJudgeStartRolling = nullptr;
    PlayerJudgeStartRun* mPlayerJudgeStartRun = nullptr;
    PlayerJudgeStartSquat* mPlayerJudgeStartSquat = nullptr;
    PlayerJudgeStartWaterSurfaceRun* mPlayerJudgeStartWaterSurfaceRun = nullptr;
    PlayerJudgeSlopeSlide* mPlayerJudgeSlopeSlide = nullptr;
    PlayerJudgePoleClimb* mPlayerJudgePoleClimb = nullptr;
    PlayerJudgePreInputJump* mPlayerJudgePreInputJump = nullptr;
    PlayerJudgePreInputCapThrow* mPlayerJudgePreInputCapThrow = nullptr;
    PlayerJudgePreInputHackAction* mPlayerJudgePreInputHackAction = nullptr;
    HackCapJudgePreInputHoveringJump* mHackCapJudgePreInputHoveringJump = nullptr;
    HackCapJudgePreInputSeparateThrow* mHackCapJudgePreInputSeparateThrow = nullptr;
    HackCapJudgePreInputSeparateJump* mHackCapJudgePreInputSeparateJump = nullptr;
    PlayerJudgeWallCatch* mPlayerJudgeWallCatch = nullptr;
    PlayerJudgeWallCatchInputDir* mPlayerJudgeWallCatchInputDir = nullptr;
    PlayerJudgeWallHitDown* mPlayerJudgeWallHitDown = nullptr;
    PlayerJudgeWallHitDownForceRun* mPlayerJudgeWallHitDownForceRun = nullptr;
    PlayerJudgeWallHitDownRolling* mPlayerJudgeWallHitDownRolling = nullptr;
    PlayerJudgeWallKeep* mPlayerJudgeWallKeep = nullptr;
    bool gap_2 = false;
};
